# constant.py

EMPTY = 0  # Représente un espace vide
WALL = 1   # Représente un mur

# Coord.py

class Coord:
    def __init__(self, x: int, y: int) -> None:
        self.x = x
        self.y = y

    def __str__(self) -> str:
        return f"({self.x}, {self.y})"

# MazeGenerator.py
import random
from constant import EMPTY, WALL
from Coord import Coord

class MazeGenerator:
    def __init__(self, width: int, height: int) -> None:
        self.width = width
        self.height = height

    def generate(self):
        # Générer un labyrinthe aléatoire sous forme de liste de listes
        maze = [[random.choice([EMPTY, WALL]) for _ in range(self.width)] for _ in range(self.height)]
        
        # Définir l'entrée et la sortie
        entrance = Coord(0, 0)  # Entrée en haut à gauche
        exit = Coord(self.width - 1, self.height - 1)  # Sortie en bas à droite
        
        return maze, entrance, exit

# Maze.py
from constant import EMPTY, WALL
from Coord import Coord
from MazeGenerator import MazeGenerator

class Maze:
    def __init__(self, width: int, height: int) -> None:
        self.width = width
        self.height = height
        generator = MazeGenerator(width, height)
        self.maze, self.entrance, self.exit = generator.generate()

    def __str__(self) -> str:
        maze_str = ""
        for row in self.maze:
            for cell in row:
                if cell == EMPTY:
                    maze_str += " "  # Représente un espace vide par un espace
                else:
                    maze_str += "#"  # Représente un mur par un "#"
            maze_str += "\n"
        return maze_str

    def get_entrance(self) -> Coord:
        return self.entrance

    def get_exit(self) -> Coord:
        return self.exit

# main.py
import Maze

def main():
    # Demander à l'utilisateur d'entrer les dimensions du labyrinthe
    x = int(input("Enter the width: "))
    y = int(input("Enter the height: "))
    
    # Créer le labyrinthe et l'afficher
    maze = Maze.Maze(x, y)
    print("Generated Maze:")
    print(maze)  # Afficher le labyrinthe

    # Afficher l'entrée et la sortie
    print(f"Entrance: {maze.get_entrance()}")
    print(f"Exit: {maze.get_exit()}")

if __name__ == "__main__":
    main()

